{
  "_id" : "async-limiter",
  "_rev" : "2-18fab9a3e3b8c9e18d492ce11e7a0fc3",
  "name" : "async-limiter",
  "description" : "asynchronous function queue with adjustable concurrency",
  "dist-tags" : {
    "latest" : "1.0.1"
  },
  "versions" : {
    "1.0.0" : {
      "name" : "async-limiter",
      "description" : "asynchronous function queue with adjustable concurrency",
      "version" : "1.0.0",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/strml/async-limiter.git"
      },
      "dist" : {
        "tarball" : "http://10.1.101.2:8081/artifactory/api/npm/sovos-npm-virtual/async-limiter/-/async-limiter-1.0.0.tgz",
        "shasum" : "78faed8c3d074ab81f22b4e985d79e8738f720f8"
      },
      "dependencies" : {
      },
      "devDependencies" : {
        "coveralls" : "^2.11.2",
        "eslint" : "^4.6.1",
        "eslint-plugin-mocha" : "^4.11.0",
        "intelli-espower-loader" : "^1.0.1",
        "istanbul" : "^0.3.2",
        "mocha" : "^3.5.2",
        "power-assert" : "^1.4.4"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "test" : "mocha --R intelli-espower-loader test/",
        "travis" : "npm run lint && npm run coverage",
        "coverage" : "istanbul cover ./node_modules/mocha/bin/_mocha --report lcovonly -- -R spec && cat ./coverage/lcov.info | coveralls",
        "example" : "node example",
        "lint" : "eslint ."
      },
      "_npmVersion" : "5.4.1",
      "_npmUser" : {
        "name" : "strml",
        "email" : "samuel.trace.reed@gmail.com"
      },
      "_id" : "async-limiter@1.0.0",
      "gitHead" : "02c8b498279dc7cc1ecc1c4f6fc9ca320c0ce39b",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/async-limiter-1.0.0.tgz_1505149068503_0.15003100014291704"
      },
      "_nodeVersion" : "8.4.0"
    },
    "1.0.1" : {
      "name" : "async-limiter",
      "description" : "asynchronous function queue with adjustable concurrency",
      "version" : "1.0.1",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/strml/async-limiter.git"
      },
      "dist" : {
        "tarball" : "http://10.1.101.2:8081/artifactory/api/npm/sovos-npm-virtual/async-limiter/-/async-limiter-1.0.1.tgz",
        "shasum" : "dd379e94f0db8310b08291f9d64c3209766617fd"
      },
      "dependencies" : {
      },
      "devDependencies" : {
        "coveralls" : "^3.0.3",
        "eslint" : "^5.16.0",
        "eslint-plugin-mocha" : "^5.3.0",
        "intelli-espower-loader" : "^1.0.1",
        "mocha" : "^6.1.4",
        "nyc" : "^14.1.1",
        "power-assert" : "^1.6.1"
      },
      "license" : "MIT",
      "directories" : {
      },
      "scripts" : {
        "test" : "mocha --require intelli-espower-loader test/",
        "travis" : "npm run lint && npm run test",
        "coverage" : "nyc npm test && nyc report --reporter=text-lcov | coveralls",
        "example" : "node example",
        "lint" : "eslint ."
      },
      "_npmVersion" : "6.9.0",
      "_npmUser" : {
        "name" : "strml",
        "email" : "samuel.trace.reed@gmail.com"
      },
      "_id" : "async-limiter@1.0.1",
      "gitHead" : "f3bb66f26e69a5747a6483e32c775a02632020ee",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/async-limiter_1.0.1_1564760633070_0.6974331182093105"
      },
      "_nodeVersion" : "10.16.0"
    }
  },
  "readme" : "# Async-Limiter\n\nA module for limiting concurrent asynchronous actions in flight. Forked from [queue](https://github.com/jessetane/queue).\n\n[![npm](http://img.shields.io/npm/v/async-limiter.svg?style=flat-square)](http://www.npmjs.org/async-limiter)\n[![tests](https://img.shields.io/travis/STRML/async-limiter.svg?style=flat-square&branch=master)](https://travis-ci.org/STRML/async-limiter)\n[![coverage](https://img.shields.io/coveralls/STRML/async-limiter.svg?style=flat-square&branch=master)](https://coveralls.io/r/STRML/async-limiter)\n\nThis module exports a class `Limiter` that implements some of the `Array` API.\nPass async functions (ones that accept a callback or return a promise) to an instance's additive array methods.\n\n## Motivation\n\nCertain functions, like `zlib`, have [undesirable behavior](https://github.com/nodejs/node/issues/8871#issuecomment-250915913) when\nrun at infinite concurrency.\n\nIn this case, it is actually faster, and takes far less memory, to limit concurrency.\n\nThis module should do the absolute minimum work necessary to queue up functions. PRs are welcome that would\nmake this module faster or lighter, but new functionality is not desired.\n\nStyle should confirm to nodejs/node style.\n\n## Example\n\n``` javascript\nvar Limiter = require('async-limiter')\n\nvar t = new Limiter({concurrency: 2});\nvar results = []\n\n// add jobs using the familiar Array API\nt.push(function (cb) {\n  results.push('two')\n  cb()\n})\n\nt.push(\n  function (cb) {\n    results.push('four')\n    cb()\n  },\n  function (cb) {\n    results.push('five')\n    cb()\n  }\n)\n\nt.unshift(function (cb) {\n  results.push('one')\n  cb()\n})\n\nt.splice(2, 0, function (cb) {\n  results.push('three')\n  cb()\n})\n\n// Jobs run automatically. If you want a callback when all are done,\n// call 'onDone()'.\nt.onDone(function () {\n  console.log('all done:', results)\n})\n```\n\n## Zlib Example\n\n```js\nconst zlib = require('zlib');\nconst Limiter = require('async-limiter');\n\nconst message = {some: \"data\"};\nconst payload = new Buffer(JSON.stringify(message));\n\n// Try with different concurrency values to see how this actually\n// slows significantly with higher concurrency!\n//\n// 5:        1398.607ms\n// 10:       1375.668ms\n// Infinity: 4423.300ms\n//\nconst t = new Limiter({concurrency: 5});\nfunction deflate(payload, cb) {\n  t.push(function(done) {\n    zlib.deflate(payload, function(err, buffer) {\n      done();\n      cb(err, buffer);\n    });\n  });\n}\n\nconsole.time('deflate');\nfor(let i = 0; i < 30000; ++i) {\n  deflate(payload, function (err, buffer) {});\n}\nt.onDone(function() {\n  console.timeEnd('deflate');\n});\n```\n\n## Install\n\n`npm install async-limiter`\n\n## Test\n\n`npm test`\n\n## API\n\n### `var t = new Limiter([opts])`\nConstructor. `opts` may contain inital values for:\n* `t.concurrency`\n\n## Instance methods\n\n### `t.onDone(fn)`\n`fn` will be called once and only once, when the queue is empty.\n\n## Instance methods mixed in from `Array`\nMozilla has docs on how these methods work [here](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array).\n### `t.push(element1, ..., elementN)`\n### `t.unshift(element1, ..., elementN)`\n### `t.splice(index , howMany[, element1[, ...[, elementN]]])`\n\n## Properties\n### `t.concurrency`\nMax number of jobs the queue should process concurrently, defaults to `Infinity`.\n\n### `t.length`\nJobs pending + jobs to process (readonly).\n\n",
  "time" : {
    "created" : "2017-09-11T16:57:49.546Z",
    "modified" : "2019-08-02T15:43:55.767Z",
    "1.0.0" : "2017-09-11T16:57:49.546Z",
    "1.0.1" : "2019-08-02T15:43:53.217Z"
  },
  "repository" : {
    "type" : "git",
    "url" : "git+https://github.com/strml/async-limiter.git"
  },
  "users" : {
    "tzq1011" : true
  },
  "readmeFilename" : "readme.md",
  "license" : "MIT"
}